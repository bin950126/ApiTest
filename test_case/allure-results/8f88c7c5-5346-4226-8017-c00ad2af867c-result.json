{"name": "创建service ticket", "status": "failed", "statusDetails": {"message": "AssertionError: 400 == 1000", "trace": "self = <test_case.test_service_ticket.TestParther object at 0x107a84fe0>\ndata = {'case_info': {'json': {'assetCategoryId': '${get_extract_value(category_a)}', 'assetNo': '${get_extract_value(plan_as...tion/json', 'rental-client-id': 'com.rental.user.app.rybit.stg'}, 'method': 'POST', 'url': '/support/customerTickets'}}\n\n    @pytest.mark.parametrize(\"data\", YamlUtil().extract_case('B2C_service_ticket.yaml', 'create_service_ticket'))\n    def test_create_service_ticket(self, data):\n>       ApiService().handle_case(data)\n\ntest_service_ticket.py:11: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../core/ApiService.py:57: in handle_case\n    AssertUtils().validate_response(result, validate)\n../utils/AssertUtils.py:87: in validate_response\n    self.equals(actual_value, expect_value)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncheck_value = 400, expect_value = 1000\n\n    @staticmethod\n    def equals(check_value, expect_value):\n        \"\"\"相等\"\"\"\n>       assert check_value == expect_value, f'{check_value} == {expect_value}'\nE       AssertionError: 400 == 1000\n\n../utils/AssertUtils.py:9: AssertionError"}, "attachments": [{"name": "log", "source": "014c5d7a-5e51-489d-b17f-68d50696af4e-attachment.txt", "type": "text/plain"}], "start": 1741939677070, "stop": 1741939678596, "uuid": "060e7e33-15c8-40d9-9f3c-ef3148918414", "historyId": "da3b50dcefb1ec199f78ae51ca719233", "testCaseId": "1b9850026b5177eeca38515fdbb3b992", "fullName": "test_case.test_service_ticket.TestParther#test_create_service_ticket", "labels": [{"name": "feature", "value": "B2C Service Ticket"}, {"name": "parentSuite", "value": "test_case"}, {"name": "suite", "value": "test_service_ticket"}, {"name": "subSuite", "value": "TestParther"}, {"name": "host", "value": "bindeMacBook-Pro.local"}, {"name": "thread", "value": "8041-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_case.test_service_ticket"}]}